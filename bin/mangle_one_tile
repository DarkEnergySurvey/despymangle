#!/usr/bin/env python3

import argparse
import ast
import os
import sys
import re
import collections
import shutil
import time

import numpy as np

import despydb.desdbi as desdbi
from despymisc import miscutils

import despymangle.make_ccdgons as mc
import despymangle.make_ccdmolys as mm
import despymangle.weight_molys as wm
import despymangle.make_starmask as sm
import despymangle.mangle_db as mdb
import despymangle.compare_mangle_coadd as nc
import despymangle.make_db_import_files as dbif
import filemgmt.disk_utils_local as dul

###################################################################
def parse_args(argv):
    """ Parse command line arguments """
    parser = argparse.ArgumentParser(description='Run mangle codes on a single tile')
    parser.add_argument('--des_services', action='store', help='')
    parser.add_argument('--db_section', '-s', action='store',
                        help='Must be specified if DES_DB_SECTION is not set in environment')
    parser.add_argument('--schema', action='store', help='db schema')

    parser.add_argument('--tilename', action='store', required=True)
    parser.add_argument('--tileid', action='store', required=True)
    parser.add_argument('--band', action='store', required=True)
    parser.add_argument('--pfw_attempt_id', action='store', required=False,
                        help='id for pfw_attempt for current multiepoch attempt')
    parser.add_argument('--orig_pfw_id', action='store', required=False,
                        help='id for original attempt for re-runs')

    parser.add_argument('--mrelease', action='store', dest='release', required=False)
    parser.add_argument('--mproject', action='store', dest='project', required=False)
    parser.add_argument('--mscheme', action='store', dest='scheme', required=False)
    parser.add_argument('--res', action='store', required=False)
    parser.add_argument('--snap', action='store', required=False)
    parser.add_argument('--bigsnap', action='store', required=False)
    parser.add_argument('--mtol', action='store', required=False)
    parser.add_argument('--bands', action='store', required=False)
    parser.add_argument('--band_dic', action='store', required=False)
    parser.add_argument('--asperpix', action='store', required=False)
    parser.add_argument('--aper', action='store', required=False)
    parser.add_argument('--mzpglobal', action='store', required=False)
    parser.add_argument('--starmaskval', action='store', required=False)
    parser.add_argument('--trailmaskval', action='store', required=False)
    parser.add_argument('--edgemaskval', action='store', required=False)
    parser.add_argument('--starscale', action='store', required=False)
    parser.add_argument('--border1', action='store', required=False)
    parser.add_argument('--border2', action='store', required=False)
    parser.add_argument('--ra_column', action='store', required=False)
    parser.add_argument('--dec_column', action='store', required=False)
    parser.add_argument('--max_radius', type=float, default=400.0, action='store', required=False)

    parser.add_argument('--list_redimg', action='store', required=False)
    parser.add_argument('--zsource', action='store', required=True)
    parser.add_argument('--zversion', action='store', required=True)
    parser.add_argument('--zflag', action='store', required=False)
    parser.add_argument('--z2source', action='store', required=False)
    parser.add_argument('--z2version', action='store', required=False)
    parser.add_argument('--z2flag', action='store', required=False)
    parser.add_argument('--zeropoint_table', action='store', default='zeropoint', required=False)
    parser.add_argument('--fgcm_gry_tbl', action='store', default='Y3A1_FGCM_ALL_V2_5', required=True)
    parser.add_argument('--z2pt', action='store', default='zeropoint', required=False)
    parser.add_argument('--im_to_tile', action='store', required=False)
    parser.add_argument('--list_nwgint', action='store', required=False)
    parser.add_argument('--hdr_from_db', action='store', default=False, type=bool, required=False, help='If True then get header information from the DB rather than from files (nwgint and redimg)')
    parser.add_argument('--coadd', action='store', dest='fn_coadd', required=False)
    parser.add_argument('--coadd_cat', action='store', dest='fn_coadd_cat', required=False)
    parser.add_argument('--poltiles', action='store', help='Automatically set if wget_pols')
    parser.add_argument('--poltolys', action='store', help='Automatically set if wget_pols')
    parser.add_argument('--paramfile', action='store', required=False,
                        help='file storing standard parameters')

    parser.add_argument('--data_file', action='store')
    parser.add_argument('--molysprefix', action='store')
    parser.add_argument('--polprefix', action='store')
    parser.add_argument('--dbprefix', action='store', help='prefix for db csv files, _<tablename>.csv appended')
    parser.add_argument('--pltprefix', action='store', help='prefix for plots')
    parser.add_argument('--runn', action='store', help='Unique string for processing attempt')
    parser.add_argument('--outputdir', action='store', required=False)

    parser.add_argument('--cleanup', action='store', required=False,
                        help='Y/N  whether to delete temporary files')

    parser.add_argument('--mask', action='store', dest='fn_mask_pol', help='Output file')
    parser.add_argument('--mask_star', action='store', dest='fn_mask_star_pol', help='Output file')
    parser.add_argument('--mask_bleed', action='store', dest='fn_mask_bleed_pol', help='Output file')
    parser.add_argument('--ccdgon', action='store', dest='fn_ccdgon_pol', help='Output file')
    parser.add_argument('--molyswgt', action='store', dest='fn_molys_weight_pol', help='Output file')
    parser.add_argument('--maglims', action='store', dest='fn_maglims_pol', help='Output file')
    #parser.add_argument('--compare_plot1', action='store', dest='fn_compare_plot1', required=False)
    #parser.add_argument('--compare_plot2', action='store', dest='fn_compare_plot2', required=False)


    parser.add_argument('--manglebindir', action='store', required=False)
    parser.add_argument('--imgcsv', action='store', required=False)
    parser.add_argument('--wget_pols', action='store_true',
                        help='When manually running, fetches .pol files using wget')
    parser.add_argument('--pol_wget_section', action='store', required=False,
                        help='section in des_services file that contains wget information')
    parser.add_argument('--logdir', action='store', required=False,
                        help='where to redirect stdout/stderr if running manually')

    args = vars(parser.parse_args(argv))   # convert to dict

    return args


###################################################################
def read_param_file(parfile):
    """ read the given parameter file """
    config = {}
    with open(parfile, 'r') as paramfh:
        line = paramfh.readline()
        while line:
            line = line.strip()

            # handle line continuation
            while line.endswith('\\'):
                line = line[:-1] + paramfh.readline().strip()

            # delete comments
            line = line.split('#')[0]

            # skip comment line or empty line
            if re.search(r"\S", line) and line:
                pat_key_val = r"^\s*(\S+)\s*=\s*(.+)\s*$"
                pat_match = re.search(pat_key_val, line)
                if pat_match is not None:
                    config[pat_match.group(1).lower()] = pat_match.group(2)

            line = paramfh.readline()

    return config


###################################################################
def mangle_setup(args):
    """ Perform setup steps such as reading param file """
    config = {}

    # number of tries for setting up the parameters
    # defaults to 1 for all command line arguments
    numtry = 1

    # if paramfile specified make sure it exists
    if args['paramfile'] is not None:
        if os.path.isfile(args['paramfile']):
            # allow three tries for setting the parameters
            numtry = 3
        else:
            raise Exception(f"Error reading paramfile {args['paramfile']}, file does not exist.")
    # set the parameters
    for i in range(numtry):
        try:
            # if a paramfile is given then use it for initial values
            if args['paramfile'] is not None:
                config = read_param_file(args['paramfile'])

            # add/override with command line args
            for k, v in args.items():
                if v is not None or k not in config:
                    config[k] = v

            # check for required config values
            for k in ['scheme', 'res']:
                if k not in config:
                    raise KeyError(f"Missing {k} key in params file")

            # convert band_dic (str) to actual dictionary
            config['band_dic'] = ast.literal_eval(config['band_dic'])
            config['bandnum'] = config['band_dic'][config['band']]

            # convert str to int
            for k in ['res']:
                config[k] = int(config[k])

            # convert str to float
            for k in ['aper', 'asperpix', 'starscale', 'mzpglobal']:
                config[k] = float(config[k])

            # create commonly used config values that are composites
            # of other config values
            config['pix'] = f"-P{config['scheme']}0,{config['res']:d}"
            config['restag'] = f" _{config['res']:d}{config['scheme']}"

            outdir = ''
            if config['outputdir'] is not None:
                if not config['outputdir'].endswith('/'):
                    config['outputdir'] += '/'
                miscutils.coremakedirs(config['outputdir'])
                outdir = config['outputdir']

                if config['molysprefix'] is None:
                    config['molysprefix'] = outdir + '/' + config['runn'] + '_ ' + config['band'] + '_molys'
                if config['polprefix'] is None:
                    config['polprefix'] = outdir + '/' + config['runn'] + '_' + config['band']

            # make any directories needed for output files
            mdir = os.path.dirname(config['molysprefix'])
            miscutils.coremakedirs(mdir)
            mdir = os.path.dirname(config['polprefix'])
            miscutils.coremakedirs(mdir)
            if config['pltprefix'] is not None:
                mdir = os.path.dirname(config['pltprefix'])
                miscutils.coremakedirs(mdir)
            if config['dbprefix'] is not None:
                mdir = os.path.dirname(config['dbprefix'])
                miscutils.coremakedirs(mdir)

            # create default filenames if not provided on command line
            if config['fn_ccdgon_pol'] is None: # for ccdmolys
                config['fn_ccdgon_pol'] = config['polprefix'] + '_ccdgons_weight.pol'
            if config['fn_mask_pol'] is None:  # for ccdmolys
                config['fn_mask_pol'] = config['polprefix']  + '_ccdmolys_weight.pol'
            if config['fn_mask_star_pol'] is None:
                config['fn_mask_star_pol'] = config['polprefix']  + '_starmask.pol'
            if config['fn_mask_bleed_pol'] is None:
                config['fn_mask_bleed_pol'] = config['polprefix']  + '_bleedmask.pol'
            if config['fn_molys_weight_pol'] is None:
                config['fn_molys_weight_pol'] = config['polprefix'] + '_molys_weight.pol'
            if config['fn_maglims_pol'] is None:
                config['fn_maglims_pol'] = config['polprefix'] + '_maglims.pol'


            if config['logdir'] is not None:
                miscutils.coremakedirs(config['logdir'])

            if config['schema'] is None:
                config['schema'] = ''
            elif not config['schema'].endswith('.'):
                config['schema'] += '.'

            if config['ra_column'] is None:
                config['ra_column'] = 'ALPHAWIN_J2000'

            if config['dec_column'] is None:
                config['dec_column'] = 'DELTAWIN_J2000'
            break
        except:
            # if this is the last try then report the error
            if i == (numtry - 1):
                msg = sys.exc_info()[1]
                if args['paramfile'] is not None:
                    # get the md5sum
                    md5 = dul.get_md5sum_file(args['paramfile'])
                    # copy the paramfile so it is picked up in the junk tar
                    badfname = f"bad_param_file_{args['tilename']}_{args['band']}.param"
                    shutil.copy(args['paramfile'], badfname)
                    print(f"Error reading paramfile {args['paramfile']}: {msg}, this may be caused by a corrupt file. md5sum: {md5}  a copy of this file should be in the junk tar as {badfname}")
                    raise

                print(f"Error setting parameters: {msg}")
                raise
            # if there are more attempts then indicate the retry
            print(f"Warning: issue setting parameters. Try {i + 1:d}/{numtry:d}")
            # sleep to see if the error will clear
            time.sleep(3)
    return config


###################################################################
def wget_pol_files(config):
    """ Use wget to retrieve needed .pol files if running manually """

    from despyserviceaccess import serviceaccess
    wgetinfo = serviceaccess.parse(config['des_services'], config['pol_wget_section'])
    wgetauth = f"--user={wgetinfo['user']} --password={wgetinfo['password']}"

    pol_base_url = f"{wgetinfo['pol_url_root']}/{config['project']}/{config['project']}_tiles{config['restag']}.dpol/"
    pol_tiles_filename = f"{config['project']}_tiles{config['restag']}.{config['tileid']}.pol"
    os.system(f"wget {wgetauth} {pol_base_url}/{pol_tiles_filename}")

    pol_base_url = f"{config['pol_url_root']}/{config['project']}/{config['project']}_tolys{config['restag']}.dpol/"
    pol_tolys_filename = f"{config['project']}_tolys{config['restag']}.{config['tileid']}.pol"
    os.system(f"wget {wgetauth} {pol_base_url}/{pol_tolys_filename}")

    return pol_tiles_filename, pol_tolys_filename


###################################################################
def get_nwgint_info(inlist, dbi, schema, band=None, pfwid=None, coadd_file=None):
    """ Read information from input list file
        and query DB for more """


    if inlist is None:
        # get information from the DB
        listinfo, filenames = mdb.get_nwgint_files(dbi, band, pfwid, coadd_file)
    else:
        # get information from input file
        listinfo = {}
        filenames = []    # ensure preserve order

        with open(inlist, 'r') as infh:
            for line in infh:
                fullname = line.strip()
                filename = miscutils.parse_fullname(fullname, miscutils.CU_PARSE_FILENAME)
                filenames.append(filename)
                listinfo[filename] = {'fullname': fullname}

    # get nwgint info from DB
    nwgint_tab = mdb.get_nwgint_info(dbi, schema, filenames)

    # add fullname from input file to the information grabbed from the DB
    fullname = []
    for i in range(len(nwgint_tab['FILENAME'])):
        listfile = listinfo[nwgint_tab['FILENAME'][i]]
        fullname.append(listfile['fullname'])

    nwgint_tab['FULLNAME'] = np.array(fullname)

    return nwgint_tab


###################################################################
def get_redimg_info(inlist, pfwidtemp, bandnum, dbi, schema, table, zsource, zversion, zflag,
                    nwgtab, im_to_tile, tilename, coadd_file=None, z2source=None,
                    z2version=None, z2flag=None, z2pt=None, gry_tbl=None):
    """ Read information from input list file
        and query DB for more """

    if inlist is None:
        # get information from the DB
        listinfo, filenames = mdb.get_redimg_files(dbi, nwgtab, table, zsource, zversion, zflag,
                                                   im_to_tile, tilename, coadd_file, z2source,
                                                   z2version, z2flag, z2pt, gry_tbl)
    else:
        # get information from input file
        listinfo = collections.OrderedDict()
        filenames = []    # ensure preserve order
        with open(inlist, 'r') as infh:
            for line in infh:
                #temp = line.split(',')
                #if len(temp) == 2:
                (fullname, mag_zero) = line.split(',')
                filename = miscutils.parse_fullname(fullname, miscutils.CU_PARSE_FILENAME)
                (mag_zero, sigma_mag_zero, fgcm_gry) = mdb.get_mag_zero(dbi, filename, table, zsource,
                                                                        zversion, z2source, z2version, z2pt, gry_tbl)
                #else:
                #    (fullname, mag_zero, sigma_mag_zero) = line.split(',')
                #    filename = miscutils.parse_fullname(fullname, miscutils.CU_PARSE_FILENAME)
                filenames.append(filename)
                listinfo[filename] = {'fullname': fullname,
                                      'mag_zero': float(mag_zero),
                                      'sigma_mag_zero': float(sigma_mag_zero),
                                      'fgcm_gry': float(fgcm_gry)}

    # get nwgint info from DB
    Image_tab = mdb.get_redimg_info(dbi, schema, filenames)

    # add mag_zero and fullname from input file to the information grabbed from the DB
    # create unique id within a processing attempt of a tile for the red images
    #      (several digits smaller than the file id used in the DB)
    mag_zero = []
    fullname = []
    sigma_mag_zero = []
    mangle_img_id = []
    fgcm_gry = []
    for i in range(len(Image_tab['FILENAME'])):
        listfile = listinfo[Image_tab['FILENAME'][i]]
        mag_zero.append(listfile['mag_zero'])
        sigma_mag_zero.append(listfile['sigma_mag_zero'])
        fgcm_gry.append(listfile['fgcm_gry'])
        fullname.append(listfile['fullname'])
        mangle_img_id.append(int('%s%s%08d' % (pfwidtemp, bandnum, i)))
    Image_tab['MAG_ZERO'] = np.array(mag_zero)
    Image_tab['FULLNAME'] = np.array(fullname)
    Image_tab['SIGMA_MAG_ZERO'] = np.array(sigma_mag_zero)
    Image_tab['FGCM_GRY'] = np.array(fgcm_gry)
    Image_tab['MANGLE_IMG_ID'] = np.array(mangle_img_id)


    return Image_tab

###################################################################
def run_mangle_workflow(config):
    """ Controls the order of mangle code executions """

    print(f"Mangle for {config['release']}, doing tile {config['tilename']}")

    #A ebi.extract_band_info(CCDs_filename, band,tilename,outputdir, logdir)
    print('########## Getting image info1')
    dbi = desdbi.DesDbi(config['des_services'], config['db_section'], True)

    if config['orig_pfw_id'] is None:
        if config['fn_coadd'] is not None:
            config['orig_pfw_id'] = mdb.get_pfwid_from_coadd(dbi, config['fn_coadd'])
        else:
            config['orig_pfw_id'] = config['pfw_attempt_id']
    elif config['fn_coadd'] is None:
        config['fn_coadd'] = mdb.get_coadd_from_pfwid(dbi, config['orig_pfw_id'], config['band'])

    nwgint_tab = get_nwgint_info(config['list_nwgint'], dbi, config['schema'],
                                 config['band'], config['orig_pfw_id'], config['fn_coadd'])
    if config['list_nwgint'] is None:
        config['hdr_from_db'] = True
    Image_tab = get_redimg_info(config['list_redimg'], config['pfw_attempt_id'],
                                config['bandnum'], dbi, config['schema'],
                                config['zeropoint_table'], config['zsource'],
                                config['zversion'], config['zflag'], nwgint_tab, config['im_to_tile'],
                                config['tilename'], config['fn_coadd'], config['z2source'],
                                config['z2version'], config['z2flag'], config['z2pt'], config['fgcm_gry_tbl'])

    if config['imgcsv'] is not None:
        # can't use numpy's to_csv because top level is dict instead of record
        with open(config['imgcsv'], 'w') as csvfh:
            keys = sorted(Image_tab.keys())
            csvfh.write(','.join(keys) + '\n')
            for i in range(len(Image_tab['FILENAME'])):
                linearr = []
                for k in keys:
                    if Image_tab[k][i] is None:
                        linearr.append('')
                    else:
                        linearr.append(str(Image_tab[k][i]))
                csvfh.write(','.join(linearr) + '\n')


    # Add optional skyvar plotting?

    print('\n########## Launching make_ccdgons')
    mc.ccdgons(config, Image_tab, nwgint_tab, dbi)

    print('\n########## Launching make_ccdmolys')
    mm.ccdmolys(config)
    print('Done')

    print('\n########## Launching weightmolys')
    nmoly = wm.weightmolys(config, Image_tab)
    print('Done')

    print('\n########## Launching make_starmask')
    sm.starmask(config, Image_tab, dbi)
    print('Done')

    if config['pltprefix'] is not None:
        fn_plt1 = config['pltprefix'] + '_comp1.png'
        print('\n########## Creating comparison plot 1')
        nc.make_comp(config['fn_coadd'], config['fn_molys_weight_pol'],
                     config['fn_mask_star_pol'], config['fn_mask_bleed_pol'],
                     fn_plt1,
                     limitx=np.arange(000, 10000, 10), limity=np.arange(00, 10000, 10))
        print('Done')

    if config['pltprefix'] is not None:
        print('\n########## Creating comparison plot 2')
        fn_plt2 = config['pltprefix'] + '_comp2.png'
        r1 = np.random.randint(0, 10000 - 200)
        r2 = np.random.randint(0, 10000 - 200)
        nc.make_comp(config['fn_coadd'], config['fn_molys_weight_pol'],
                     config['fn_mask_star_pol'], config['fn_mask_bleed_pol'],
                     fn_plt2,
                     limitx=np.arange(r1, r1 + 200, 1), limity=np.arange(r2, r2 + 200, 1))
        print('Done')

    if config['dbprefix'] is not None:
        print('\n########## Creating csv files for database ingestion')
        dbif.make_csv_files(config, Image_tab, dbi, nmoly)
        print('Done')

    print('Finished mangle')


###################################################################
def main(argv):
    """ Entry point """
    args = parse_args(argv)
    config = mangle_setup(args)
    if config['list_redimg'] is None and (config['zsource'] is None or config['zversion'] is None or config['im_to_tile'] is None):
        raise Exception("If list_redimg is not given then both zsource and zversion must be given.")
    if config['orig_pfw_id'] is None and config['fn_coadd'] is None:
        raise Exception("Either orig_pfw_id or coadd must be specified.")
    run_mangle_workflow(config)


if __name__ == '__main__':
    main(sys.argv[1:])
